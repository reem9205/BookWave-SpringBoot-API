package com.csis231.api.model;

import jakarta.persistence.*;
import java.time.LocalDate;

/**
 * Entity representing a Transaction in the database.
 */
@Entity
@Table(name = "borrowing_transaction")
public class Transaction {

    /**
     * Unique identifier for the borrowing transaction.
     * This field will be automatically generated by the database as the primary key.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "transaction_id", nullable = false)
    private long transactionId; // Primary key for BorrowingTransaction entity

    /**
     * The date when the book was issued.
     * This date indicates when the book was borrowed by the user.
     */
    @Column(name = "issue_date", nullable = false)
    private LocalDate issueDate;

    /**
     * The date when the book was returned.
     * This date indicates when the book was returned by the user. It can be null if not yet returned.
     */
    @Column(name = "return_date")
    private LocalDate returnDate;

    /**
     * The date when the book is due for return.
     * This date indicates when the book should be returned by the user.
     */
    @Column(name = "due_date", nullable = false)
    private LocalDate dueDate;

    /**
     * The username of the user who borrowed the book.
     * This field represents a foreign key to the User entity.
     */
    @ManyToOne
    @JoinColumn(name = "username", referencedColumnName = "username", nullable = false)
    private User user; // The User who borrowed the book

    /**
     * The book associated with the borrowing transaction.
     * This field represents a foreign key to the Book entity.
     */
    @ManyToOne
    @JoinColumn(name = "book_id", referencedColumnName = "book_id", nullable = false)
    private Book book; // The Book that was borrowed

    /**
     * Default constructor required by JPA.
     */
    public Transaction() {
        this(0, LocalDate.now(), null, LocalDate.now(), null, null); // Initialize with default values
    }

    /**
     * Constructor to initialize a BorrowingTransaction with given values.
     *
     * @param transactionId the unique identifier of the borrowing transaction.
     * @param issueDate     the date when the book was issued.
     * @param returnDate    the date when the book was returned (nullable).
     * @param dueDate       the date when the book is due for return.
     * @param user          the User entity who borrowed the book.
     * @param book          the Book entity that was borrowed.
     */
    public Transaction(long transactionId, LocalDate issueDate, LocalDate returnDate,
                                LocalDate dueDate, User user, Book book) {
        setTransaction(transactionId, issueDate, returnDate, dueDate, user, book);
    }

    /**
     * Method to set all the fields of the BorrowingTransaction entity.
     *
     * @param transactionId the unique identifier of the borrowing transaction.
     * @param issueDate     the date when the book was issued.
     * @param returnDate    the date when the book was returned (nullable).
     * @param dueDate       the date when the book is due for return.
     * @param user          the User entity who borrowed the book.
     * @param book          the Book entity that was borrowed.
     */
    public void setTransaction(long transactionId, LocalDate issueDate, LocalDate returnDate,
                               LocalDate dueDate, User user, Book book) {
        setTransactionId(transactionId);
        setIssueDate(issueDate);
        setReturnDate(returnDate);
        setDueDate(dueDate);
        setUser(user);
        setBook(book);
    }

    // Getters and Setters

    /**
     * Get the unique identifier for the borrowing transaction.
     *
     * @return the transaction ID.
     */
    public long getTransactionId() {
        return transactionId;
    }

    /**
     * Set the unique identifier for the borrowing transaction.
     *
     * @param transactionId the transaction ID to set.
     */
    public void setTransactionId(long transactionId) {
        this.transactionId = transactionId;
    }

    /**
     * Get the issue date for the borrowing transaction.
     *
     * @return the issue date.
     */
    public LocalDate getIssueDate() {
        return issueDate;
    }

    /**
     * Set the issue date for the borrowing transaction.
     *
     * @param issueDate the issue date to set.
     */
    public void setIssueDate(LocalDate issueDate) {
        this.issueDate = issueDate;
    }

    /**
     * Get the return date for the borrowing transaction.
     *
     * @return the return date (nullable).
     */
    public LocalDate getReturnDate() {
        return returnDate;
    }

    /**
     * Set the return date for the borrowing transaction.
     *
     * @param returnDate the return date to set (nullable).
     */
    public void setReturnDate(LocalDate returnDate) {
        this.returnDate = returnDate;
    }

    /**
     * Get the due date for the borrowing transaction.
     *
     * @return the due date.
     */
    public LocalDate getDueDate() {
        return dueDate;
    }

    /**
     * Set the due date for the borrowing transaction.
     *
     * @param dueDate the due date to set.
     */
    public void setDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
    }

    /**
     * Get the User who borrowed the book.
     *
     * @return the User entity.
     */
    public User getUser() {
        return user;
    }

    /**
     * Set the User who borrowed the book.
     *
     * @param user the User entity to set.
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Get the Book that was borrowed.
     *
     * @return the Book entity.
     */
    public Book getBook() {
        return book;
    }

    /**
     * Set the Book that was borrowed.
     *
     * @param book the Book entity to set.
     */
    public void setBook(Book book) {
        this.book = book;
    }
}
